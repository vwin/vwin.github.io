<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Git的核心概念</title>
      <link href="/2018/08/20/Git%E7%9A%84%E6%A0%B8%E5%BF%83%E6%A6%82%E5%BF%B5/"/>
      <content type="html"><![CDATA[<p>原文地址：<a href="https://lufficc.com/blog/the-core-conception-of-git" target="_blank" rel="noopener">https://lufficc.com/blog/the-core-conception-of-git</a><br>Git的核心概念，原理理解<br><a id="more"></a><br>本文不是Git使用教学篇，而是偏向理论方面，旨在更加深刻的理解Git，这样才能更好的使用它，让工具成为我们得力的助手。</p><h2 id="版本控制系统"><a href="#版本控制系统" class="headerlink" title="版本控制系统"></a>版本控制系统</h2><p>Git 是目前世界上最优秀的分布式版本控制系统。版本控制系统是能够随着时间的推进记录一系列文件的变化以便于你以后想要的退回到某个版本的系统。版本控制系统分为三大类：本地版本控制系统，集中式版本控制系统和分布式版本控制系统</p><h3 id="本地版本控制（Local-Version-Control-Systems）"><a href="#本地版本控制（Local-Version-Control-Systems）" class="headerlink" title="本地版本控制（Local Version Control Systems）"></a>本地版本控制（Local Version Control Systems）</h3><p>是将文件的各个版本以一定的数据格式存储在本地的磁盘（有的VCS 是保存文件的变化补丁，即在文件内容变化时计算出差量保存起来），这种方式在一定程度上解决了手动复制粘贴的问题，但无法解决多人协作的问题。<br><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fug6ip6yygj30j80dqaau.jpg" alt="本地版本控制"></p><h3 id="集中式版本控制（Centralized-Version-Control-Systems）"><a href="#集中式版本控制（Centralized-Version-Control-Systems）" class="headerlink" title="集中式版本控制（Centralized Version Control Systems）"></a>集中式版本控制（Centralized Version Control Systems）</h3><p>相比本地版本控制没有什么本质的变化，只是多了个一个中央服务器，各个版本的数据库存储在中央服务器，管理员可以控制开发人员的权限，而开发人员也可以从中央服务器拉取数据。集中式版本控制虽然解决了团队协作问题，但缺点也很明显：所有数据存储在中央服务器，服务器一旦宕机或者磁盘损坏，会造成不可估量的损失。<br><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fug6j3935cj30le0jb3zr.jpg" alt="集中式版本控制"></p><h3 id="分布式版本控制（-Distributed-Version-Control-System）"><a href="#分布式版本控制（-Distributed-Version-Control-System）" class="headerlink" title="分布式版本控制（ Distributed Version Control System）"></a>分布式版本控制（ Distributed Version Control System）</h3><p>与前两者均不同。首先，在分布式版本控制系统中，像 Git，Mercurial，Bazaar 以及 Darcs 等，系统保存的的不是文件变化的差量，而是文件的快照，即把文件的整体复制下来保存，而不关心具体的变化内容。其次，最重要的是分布式版本控制系统是分布式的，当你从中央服务器拷贝下来代码时，你拷贝的是一个完整的版本库，包括历史纪录，提交记录等，这样即使某一台机器宕机也能找到文件的完整备份。<br><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fug6j3935cj30le0jb3zr.jpg" alt="分布式版本控制"></p><h2 id="Git基础"><a href="#Git基础" class="headerlink" title="Git基础"></a>Git基础</h2><p>Git是一个分布式版本控制系统，保存的是文件的完整快照，而不是差异变化或者文件补丁。<br><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fug6kyhmz5j30k90bo0tp.jpg" alt="保存每一次变化文件的完整内容"></p><p>Git每一次提交都是对项目文件的一个完整拷贝，因此你可以完全恢复到以前的任一个提交而不会发生任何区别。这里有一个问题：如果我的项目大小是10M，那Git占用的空间是不是随着提交次数的增加线性增加呢？我提交（commit）了10次，占用空间是不是100M呢？很显然不是，Git是很智能的，如果文件没有变化，它只会保存一个指向上一个版本的文件的指针，即，对于一个特定版本的文件，Git只会保存一个副本，但可以有多个指向该文件的指针。</p><blockquote><p>另外注意，Git最适合保存文本文件，事实上Git就是被设计出来就是为了保存文本文件的，像各种语言的源代码，因为Git可以对文本文件进行很好的压缩和差异分析（大家都见识过了，Git的差异分析可以精确到你添加或者删除了某个字母）。而二进制文件像视频，图片等，Git也能管理，但不能取得较好的效果（压缩比率低，不能差异分析）。实验证明，一个 500k 的文本文件经Git压缩后仅 50k 左右，稍微改变内容后两次提交，会有两个 50k 左右的文件，没错的，保存的是完整快照。而对于二进制文件，像视频，图片，压缩率非常小， Git 占用空间几乎随着提交次数线性增长。<br><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fug6llejgcj30ju0c10u2.jpg" alt="未变化的文件只保存上一个版本的指针"></p></blockquote><p>Git工程有三个工作区域：工作目录，暂存区域，以及本地仓库。工作目录是你当前进行工作的区域；暂存区域是你运行git add命令后文件保存的区域，也是下次提交将要保存的文件（注意：Git 提交实际读取的是暂存区域的内容，而与工作区域的文件无关，这也是当你修改了文件之后，如果没有添加git add到暂存区域，并不会保存到版本库的原因）；本地仓库就是版本库，记录了你工程某次提交的完整状态和内容，这意味着你的数据永远不会丢失。<br><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fug6m2so2vj30gv066755.jpg" alt=""></p><p>相应的，文件也有三种状态：已提交（committed），已修改（modified）和已暂存（staged）。已提交表示该文件已经被安全地保存在本地版本库中了；已修改表示修改了某个文件，但还没有提交保存；已暂存表示把已修改的文件放在下次提交时要保存的清单中，即暂存区域。所以使用Git的基本工作流程就是：</p><ol><li>在工作区域增加，删除或者修改文件。</li><li>运行git add，将文件快照保存到暂存区域。</li><li>提交更新，将文件永久版保存到版本库中。<br><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fug6mf83j3j30fx09m74v.jpg" alt=""></li></ol><h2 id="Git对象"><a href="#Git对象" class="headerlink" title="Git对象"></a>Git对象</h2><p>现在已经明白Git的基本流程，但Git是怎么完成的呢？Git怎么区分文件是否发生变化？下面简单介绍一下Git的基本原理。</p><h3 id="SHA-1-校验和"><a href="#SHA-1-校验和" class="headerlink" title="SHA-1 校验和"></a>SHA-1 校验和</h3><p>Git 是一套内容寻址文件系统。意思就是Git 从核心上来看不过是简单地存储键值对（key-value），value是文件的内容，而key是文件内容与文件头信息的 40个字符长度的 SHA-1 校验和，例如：5453545dccd33565a585ffe5f53fda3e067b84d8。Git使用该校验和不是为了加密，而是为了数据的完整性，它可以保证，在很多年后，你重新checkout某个commit时，一定是它多年前的当时的状态，完全一摸一样。当你对文件进行了哪怕一丁点儿的修改，也会计算出完全不同的 SHA-1 校验和，这种现象叫做“雪崩效应”（Avalanche effect）。</p><p>SHA-1 校验和因此就是上文提到的文件的指针，这和C语言中的指针很有些不同：C语言将数据在内存中的地址作为指针，Git将文件的 SHA-1 校验和作为指针，目的都是为了唯一区分不同的对象。但是当C语言指针指向的内存中的内容发生变化时，指针并不发生变化，但Git指针指向的文件内容发生变化时，指针也会发生变化。所以，Git中每一个版本的文件，都有一个唯一的指针指向它。</p><h3 id="文件-blob-对象，树-tree-对象，提交-commit-对象"><a href="#文件-blob-对象，树-tree-对象，提交-commit-对象" class="headerlink" title="文件(blob)对象，树(tree)对象，提交(commit)对象"></a>文件(blob)对象，树(tree)对象，提交(commit)对象</h3><p>blob 对象保存的仅仅是文件的内容，tree 对象更像是操作系统中的目录，它可以保存blob对象和tree 对象。一个单独的 tree 对象包含一条或多条 tree 记录，每一条记录含有一个指向 blob 对象或子 tree 对象的 SHA-1 指针，并附有该对象的权限模式 (mode)、类型和文件名信息等：<br><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fug6npzzgmj30gx0ai3z7.jpg" alt=""><br>当你对文件进行修改并提交时，变化的文件会生成一个新的blob对象，记录文件的完整内容（是全部内容，不是变化内容），然后针对该文件有一个唯一的 SHA-1 校验和，修改此次提交该文件的指针为该 SHA-1 校验和，而对于没有变化的文件，简单拷贝上一次版本的指针即 SHA-1 校验和，而不会生成一个全新的blob对象，这也解释了10M大小的项目进行10次提交总大小远远小于100M的原因。</p><p>另外，每次提交可能不仅仅只有一个 tree 对象，它们指明了项目的不同快照，但你必须记住所有对象的 SHA-1 校验和才能获得完整的快照，而且没有作者，何时，为什么保存这些快照的原因。commit对象就是问了解决这些问题诞生的，commit 对象的格式很简单：指明了该时间点项目快照的顶层tree对象、作者/提交者信息（从 Git 设置的 user.name 和 user.email中获得)以及当前时间戳、一个空行，上一次的提交对象的ID以及提交注释信息。你可以简单的运行git log来获取这新信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git log</span><br><span class="line">commit 2cb0bb475c34a48957d18f67d0623e3304a26489</span><br><span class="line">Author: lufficc &lt;luffy.lcc@gmail.com&gt;</span><br><span class="line">Date:   Sun Oct 2 17:29:30 2016 +0800</span><br><span class="line"></span><br><span class="line">    fix some font size</span><br><span class="line"></span><br><span class="line">commit f0c8b4b31735b5e5e96e456f9b0c8d5fc7a3e68a</span><br><span class="line">Author: lufficc &lt;luffy.lcc@gmail.com&gt;</span><br><span class="line">Date:   Sat Oct 1 02:55:48 2016 +0800</span><br><span class="line"></span><br><span class="line">    fix post show css</span><br><span class="line"></span><br><span class="line">***********省略***********</span><br></pre></td></tr></table></figure><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fug6ofbhbmj30m40d6gn0.jpg" alt=""></p><p>上图的Test.txt是第一次提交之前生成的，第一次它的初始 SHA-1 校验和以3c4e9c开头。随后对它进行了修改，所以第二次提交时生成了一个全新blob对象，校验和以1f7a7a开头。而第三次提交时Test.txt并没有变化，所以只是保存最近版本的 SHA-1 校验和而不生成全新的blob对象。在项目开发过程中新增加的文件在提交后都会生成一个全新的blob对象来保存它。注意除了第一次每个提交对象都有一个指向上一次提交对象的指针。</p><p>因此简单来说，blob对象保存文件的内容；tree对象类似文件夹，保存blob对象和其它tree对象；commit对象保存tree对象，提交信息，作者，邮箱以及上一次的提交对象的ID（第一次提交没有）。而Git就是通过组织和管理这些对象的状态以及复杂的关系实现的版本控制以及以及其他功能如分支。</p><h2 id="Git引用"><a href="#Git引用" class="headerlink" title="Git引用"></a>Git引用</h2><p>现在再来看引用，就会很简单了。如果我们想要看某个提交记录之前的完整历史，就必须记住这个提交ID，但提交ID是一个40位的 SHA-1 校验和，难记。所以引用就是SHA-1 校验和的别名，存储在.git/refs文件夹中。</p><p>最常见的引用也许就是master了，因为这是Git默认创建的（可以修改，但一般不修改），它始终指向你项目主分支的最后一次提交记录。如果在项目根目录运行cat .git/refs/heads，会输出一个SHA-1 校验和，例如：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat .git/refs/heads/master</span><br><span class="line">4f3e6a6f8c62bde818b4b3d12c8cf3af45d6dc00</span><br></pre></td></tr></table></figure><p></p><p>因此master只是一个40位SHA-1 校验和的别名罢了。</p><p>还有一个问题，Git如何知道你当前分支的最后一次的提交ID?在.git文件夹下有一个HEAD文件，像这样：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> cat .git/HEAD</span><br><span class="line">ref: refs/heads/master</span><br></pre></td></tr></table></figure><p>HEAD文件其实并不包含 SHA-1 值，而是一个指向当前分支的引用，内容会随着切换分支而变化，内容格式像这样：ref: refs/heads/<branch-name>。当你执行git commit命令时，它就创建了一个commit对象，把这个commit对象的父级设置为 HEAD 指向的引用的 SHA-1 值。</branch-name></p><p>再来说说 Git 的 tag，标签。标签从某种意义上像是一个引用， 它指向一个 commit 对象而不是一个 tree，包含一个标签，一组数据，一个消息和一个commit 对象的指针。但是区别就是引用随着项目进行它的值在不断向前推进变化，但是标签不会变化——永远指向同一个 commit，仅仅是提供一个更加友好的名字。</p><h2 id="Git分支"><a href="#Git分支" class="headerlink" title="Git分支"></a>Git分支</h2><h3 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h3><p>分支是Git的杀手级特征，而且Git鼓励在工作流程中频繁使用分支与合并，哪怕一天之内进行许多次都没有关系。因为Git分支非常轻量级，不像其他的版本控制，创建分支意味着要把项目完整的拷贝一份，而Git创建分支是在瞬间完成的，而与你工程的复杂程度无关。</p><p>因为在上文中已经说到，Git保存文件的最基本的对象是blob对象，Git本质上只是一棵巨大的文件树，树的每一个节点就是blob对象，而分支只是树的一个分叉。说白了，分支就是一个有名字的引用，它包含一个提交对象的的40位校验和，所以创建分支就是向一个文件写入 41 个字节（外加一个换行符）那么简单，所以自然就快了，而且与项目的复杂程度无关。</p><p>Git的默认分支是master，存储在.git\refs\heads\master文件中，假设你在master分支运行git branch dev创建了一个名字为dev的分支，那么git所做的实际操作是：</p><ol><li>在.git\refs\heads文件夹下新建一个文件名为dev（没有扩展名）的文本文件。</li><li>将HEAD指向的当前分支（当前为master）的40位SHA-1 校验和外加一个换行符写入dev文件。</li><li>结束。<br><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fug6pi594cj30gr03u0t0.jpg" alt=""></li></ol><p>创建分支就是这么简单，那么切换分支呢？更简单：</p><ol><li>修改.git文件下的HEAD文件为ref: refs/heads/&lt;分支名称&gt;。</li><li>按照分支指向的提交记录将工作区的文件恢复至一模一样。</li><li>结束。<blockquote><p>记住，HEAD文件指向当前分支的最后一次提交，同时，它也是以当前分支再次创建一个分支时，将要写入的内容。</p></blockquote></li></ol><h3 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h3><p>再来说一说合并，首先是Fast-forward，换句话说，如果顺着一个分支走下去可以到达另一个分支的话，那么 Git 在合并两者时，只会简单地把指针右移，因为这种单线的历史分支不存在任何需要解决的分歧，所以这种合并过程可以称为快进（Fast forward）。比如：<br><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fug6q4ki1rj30jt04it92.jpg" alt=""></p><p>注意箭头方向，因为每一次提交都有一个指向上一次提交的指针，所以箭头方向向左，更为合理</p><p>当在master分支合并dev分支时，因为他们在一条线上，这种单线的历史分支不存在任何需要解决的分歧，所以只需要master分支指向dev分支即可，所以非常快。</p><p>当分支出现分叉时，就有可能出现冲突，而这时Git就会要求你去解决冲突，比如像下面的历史：<br><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fug6qnj6vij30ki0bv751.jpg" alt=""></p><p>因为master分支和dev分支不在一条线上，即v7不是v5的直接祖先，Git 不得不进行一些额外处理。就此例而言，Git 会用两个分支的末端（v7 和 v5）以及它们的共同祖先（v3）进行一次简单的三方合并计算。合并之后会生成一个和并提交v8：<br><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fug6qy9o5qj30q30c4q3y.jpg" alt=""></p><blockquote><p>注意：和并提交有两个祖先（v7和v5）。</p></blockquote><p>分支的变基rebase<br>把一个分支中的修改整合到另一个分支的办法有两种：merge 和 rebase。首先merge 和 rebase最终的结果是一样的，但 rebase能产生一个更为整洁的提交历史。仍然以上图为例，如果简单的merge，会生成一个提交对象v8，现在我们尝试使用变基合并分支，切换到dev：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git checkout dev</span><br><span class="line"><span class="meta">$</span> git rebase master</span><br><span class="line">First, rewinding head to replay your work on top of it...</span><br><span class="line">Applying: added staged command</span><br></pre></td></tr></table></figure><p></p><p><img src="https://ws3.sinaimg.cn/large/006tNbRwly1fug6rjygsuj30ki0bv751.jpg" alt=""></p><p>这段代码的意思是：回到两个分支最近的共同祖先v3，根据当前分支（也就是要进行变基的分支 dev）后续的历次提交对象（包括v4，v5），生成一系列文件补丁，然后以基底分支（也就是主干分支 master）最后一个提交对象（v7）为新的出发点，逐个应用之前准备好的补丁文件，最后会生成两个新的合并提交对象（v4’，v5’）,从而改写 dev 的提交历史，使它成为 master 分支的直接下游，如下图：<br><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fug6spptohj30qy096gmh.jpg" alt=""></p><p>现在，就可以回到master分支进行快速合并Fast-forward了，因为master分支和dev分支在一条线上：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git checkout master</span><br><span class="line"><span class="meta">$</span> git merge dev</span><br></pre></td></tr></table></figure><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fug6ryedigj30r8097dgo.jpg" alt=""></p><p>现在的v5’对应的快照，其实和普通的三方合并，即上个例子中的 v8 对应的快照内容一模一样。虽然最后整合得到的结果没有任何区别，但变基能产生一个更为整洁的提交历史。如果视察一个变基过的分支的历史记录，看起来会更清楚：仿佛所有修改都是在一根线上先后进行的，尽管实际上它们原本是同时并行发生的。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>Git保存文件的完整内容，不保存差量变化。</li><li>Git以储键值对（key-value）的方式保存文件。</li><li>每一个文件，相同文件的不同版本，都有一个唯一的40位的 SHA-1 校验和与之对应。</li><li>SHA-1 校验和是文件的指针，Git依靠它来区分文件。</li><li>每一个文件都会在Git的版本库里生成blob对象来保存。</li><li>对于没有变化的文件，Git只会保留上一个版本的指针。</li><li>Git实际上是通过维持复杂的文件树来实现版本控制的。</li><li>使用Git的工作流程基本就是就是文件在三个工作区域之间的流动。</li><li>应该大量使用分支进行团队协作。</li><li>分支只是对提交对象的一个引用。</li></ol>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jmeter使用总结</title>
      <link href="/2018/08/10/Jmeter%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/"/>
      <content type="html"><![CDATA[<p>Jmeter使用总结<br><a id="more"></a></p><h2 id="多个线程组顺序执行和并行执行"><a href="#多个线程组顺序执行和并行执行" class="headerlink" title="多个线程组顺序执行和并行执行"></a>多个线程组顺序执行和并行执行</h2><p>在测试计划的设置中可以设置<br><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fu4rlcw08sj30nn0flab8.jpg" alt=""></p><ol><li><p>勾选 Run Thread Groups consecutively(i.e.one at time)，则表示顺序执行。顺序执行，指的是测试计划中存在多个线程组时，第一个线程组执行完后再执行下一个线程组。</p></li><li><p>不勾选 Run Thread Groups consecutively(i.e.one at time)，则表示并行执行。并行执行，指的是指的是测试计划中存在多个线程组时，所有线程组都在同一时刻执行</p></li></ol>]]></content>
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jmeter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Linux安装Samba</title>
      <link href="/2018/08/09/Linux%E5%AE%89%E8%A3%85Samba/"/>
      <content type="html"><![CDATA[<p>linux 安装Samba，Mac远程连接Linux<br><a id="more"></a></p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>需要在Mac上远程连接一台Linux服务器，管理一些文件。不仅需要进行常规的本地文件操作，还需要上传、下载、编辑。</p><h2 id="Samba简介"><a href="#Samba简介" class="headerlink" title="Samba简介"></a>Samba简介</h2><p>samba，是一个基于GPL协议的自由软件。它重新实现了SMB/CIFS协议，可以在各个平台共享文件和打印机。</p><p>1991年，还是大学生的Andrew Tridgwell，有三台机器，分别是Microsoft的DOS系统、DEC的Digital Unix系统、以及Sun的Unix系统。当时的技术无法让三者共享文件。为此，他开发了samba并将其开源。</p><p>本来改名为smbserver，但是一家商业公司注册了SMBServer商标。他被告知不能使用。于是执行了grep -i ‘^s.<em>m.</em>b’ /usr/share/dict/words，从中选择了samba这个词。</p><h2 id="Samba安装"><a href="#Samba安装" class="headerlink" title="Samba安装"></a>Samba安装</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>以Ubuntu为例<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install samba</span><br></pre></td></tr></table></figure><p></p><h3 id="创建共享文件夹"><a href="#创建共享文件夹" class="headerlink" title="创建共享文件夹"></a>创建共享文件夹</h3><p>也可以用现有的文件夹，chmod改变一下权限即可<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mkdir /home/USER_NAME/shared_directory</span><br><span class="line">sudo chmod 777 /home/USER_NAME/shared_directory</span><br></pre></td></tr></table></figure><p></p><h3 id="配置smb-conf"><a href="#配置smb-conf" class="headerlink" title="配置smb.conf"></a>配置smb.conf</h3><p>直接修改/etc/samba/smb.conf，在文件末尾添加：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[share]</span><br><span class="line">      path = /home/USER_NAME/shared_directory</span><br><span class="line">      available = yes</span><br><span class="line">      browseable = yes</span><br><span class="line">      public = yes</span><br><span class="line">      writable = yes</span><br></pre></td></tr></table></figure><p></p><h3 id="添加samba账户"><a href="#添加samba账户" class="headerlink" title="添加samba账户"></a>添加samba账户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /etc/samba/smbpasswd</span><br><span class="line">sudo smbpasswd -a USER_NAME</span><br></pre></td></tr></table></figure><p>USER_NAME就是你需要添加的用户名。然后会提示输入两次密码。</p><h2 id="Mac连接"><a href="#Mac连接" class="headerlink" title="Mac连接"></a>Mac连接</h2><ol><li>打开Finder（或在桌面），CMD + k，可以得到以下页面：<br>在<code>smb://</code>后面，输入你的服务器地址或域名<br><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fu3fjrdat5j30dg06daaj.jpg" alt=""></li><li>输入前面设置的username 和 密码<br><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fu3fkaxk02j30bq05m0t1.jpg" alt=""></li></ol><h2 id="DS-Store安全隐患"><a href="#DS-Store安全隐患" class="headerlink" title=".DS_Store安全隐患"></a>.DS_Store安全隐患</h2><p>由于Finder自带的.DS_Store包含了太多信息，如果在服务器产生.DS_Store会造成安全隐患。如果没有特殊配置，你用Finder管理远程的文件夹会自动产生.DS_Store。</p><p>在云端检查你的共享文件夹，如果发现.DS_Store，立即删除！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls -a /home/USER_NAME/shared_directory</span><br></pre></td></tr></table></figure><p>如何让Finder不在远程连接时产生.DS_Store？<br>打开Mac的Terminal，输入:<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.desktopservices DSDontWriteNetworkStores true</span><br></pre></td></tr></table></figure><p></p><p>然后重启Mac，再试试远程连接。</p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> samba </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>性能测试基础--指标理解</title>
      <link href="/2018/08/08/%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95%E5%9F%BA%E7%A1%80--%E6%8C%87%E6%A0%87/"/>
      <content type="html"><![CDATA[<p>性能测试中会涉及到许多性能指标，在本文中进行了总结。目前只有QPS和TPS两个指标。<br><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fu2i7uawaaj30jg0amab4.jpg" alt=""><br><a id="more"></a></p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><h3 id="QPS"><a href="#QPS" class="headerlink" title="QPS"></a>QPS</h3><p>Queries Per Second意思是“每秒查询率”，是一台服务器每秒能够相应的查询次数，是对一个特定的查询服务器在规定时间内所处理流量多少的衡量标准。</p><h3 id="TPS"><a href="#TPS" class="headerlink" title="TPS"></a>TPS</h3><p>是Transactions Per Second的缩写，也就是事务数/秒。它是软件测试结果的测量单位。一个事务是指一个客户机向服务器发送请求然后服务器做出反应的过程。客户机在发送请求时开始计时，收到服务器响应后结束计时，以此来计算使用的时间和完成的事务个数，最终利用这些信息来估计得分。客户机使用加权协函数平均方法来计算客户机的得分，测试软件就是利用客户机的这些信息使用加权协函数平均方法来计算服务器端的整体TPS得分。</p><p>QPS（TPS）= 并发数/平均响应时间 或者 并发数 = QPS * 平均响应时间 (这里响应时间的单位是秒)</p><p>举例，我们一个HTTP请求的响应时间是20ms，在10个并发的情况下，QPS就是10*1000/20=500。</p><p>这里有个关键的点就是QPS一定是跟并发数联系在一起的，离开并发数谈QPS是没意义的。<br>QPS、TPS和性能的关系</p><p>一个系统吞吐量通常由QPS（TPS）、并发数两个因素决定，每套系统这两个值都有一个相对极限值，在应用场景访问压力下，只要某一项达到系统最高值，系统的吞吐量就上不去了，如果压力继续增大，系统的吞吐量反而会下降，原因是系统超负荷工作，上下文切换、内存等等其它消耗导致系统性能下降。<br><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fu2i7uawaaj30jg0amab4.jpg" alt=""></p><p>从上图可以看出，开始，系统只有一个用户，CPU工作肯定是不饱合的。一方面该服务器可能有多个cpu，但是只处理单个进程，另一方面，在处理一个进程中，有些阶段可能是IO阶段，这个时候会造成CPU等待，但是又没有其他请求进程可以被处理。</p><p>随着并发用户数的增加，CPU利用率上升，QPS相应也增加（公式为QPS=并发用户数/平均响应时间。）</p><p>随着并发用户数的增加，平均响应时间也在增加，而且平均响应时间的增加是一个指数增加曲线。</p><p>而当并发数增加到很大时，每秒钟都会有很多请求需要处理，会造成进程（线程）频繁切换，反而真正用于处理请求的时间变少，每秒能够处理的请求数反而变少，同时用户的请求等待时间也会变大，甚至超过用户的心理底线。</p><p>我们对单台服务器进行压测有了性能测试数据以后，可以根据业务上能接受最大客户响应时间对应到相应的QPS数，从而计算出需要的服务器的数量。</p><p>举例来说，响应时间10ms和1000ms对通过浏览器的客户是没有明显体验差别的，基于1000ms估算服务器的数量我们的成本会降低很多。</p><p>每天300wPV的在单台机器上，这台机器需要多少QPS？对于这样的问题，假设每天80%的访问集中在20%的时间里，这20%时间叫做峰值时间。</p><p>(3000000 <em>0.8) / (3600 </em>24 * 0.2) = 139 (QPS).</p><p>还是上面的数据，如果一台机器的QPS是58，需要几台机器来支持？答：139 / 58 = 3</p>]]></content>
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能测试 </tag>
            
            <tag> QPS </tag>
            
            <tag> TPS </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Locust源码--1</title>
      <link href="/2018/08/08/Locust%E6%BA%90%E7%A0%81-1/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> locust </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Locust源码--0</title>
      <link href="/2018/08/08/Locust%E6%BA%90%E7%A0%81-0/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> locust </tag>
            
            <tag> 源码 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Locust实例</title>
      <link href="/2018/08/08/Locust%E5%AE%9E%E4%BE%8B/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能测试 </tag>
            
            <tag> locust </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Locust基础</title>
      <link href="/2018/08/08/Locust%E5%9F%BA%E7%A1%80/"/>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能测试 </tag>
            
            <tag> locust </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jmeter性能测试</title>
      <link href="/2018/08/08/Jmeter%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95/"/>
      <content type="html"><![CDATA[<p>一个用jmeter做性能测试的简单例子。</p>]]></content>
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jmeter </tag>
            
            <tag> 性能测试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>持续集成介绍</title>
      <link href="/2018/08/07/%E6%8C%81%E7%BB%AD%E9%9B%86%E6%88%90%E4%BB%8B%E7%BB%8D/"/>
      <content type="html"><![CDATA[<p>互联网软件的开发和发布，已经形成了一套标准流程，最重要的组成部分就是持续集成（Continuous integration，简称 CI）。<br><a id="more"></a></p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>持续集成指的是，频繁地（一天多次）将代码集成到主干。<br>它的好处主要有两个。</p><p>1、快速发现错误。每完成一点更新，就集成到主干，可以快速发现错误，定位错误也比较容易。</p><p>2、防止分支大幅偏离主干。如果不是经常集成，主干又在不断更新，会导致以后集成的难度变大，甚至难以集成。</p><p>持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。</p><p>Martin Fowler 说过，”持续集成并不能消除 Bug，而是让它们非常容易发现和改正。”</p><p>与持续集成相关的，还有两个概念，分别是持续交付和持续部署。</p><h2 id="持续交付"><a href="#持续交付" class="headerlink" title="持续交付"></a>持续交付</h2><p>持续交付（Continuous delivery）指的是，频繁地将软件的新版本，交付给质量团队或者用户，以供评审。如果评审通过，代码就进入生产阶段。</p><p>持续交付可以看作持续集成的下一步。它强调的是，不管怎么更新，软件是随时随地可以交付的。</p><h2 id="持续部署"><a href="#持续部署" class="headerlink" title="持续部署"></a>持续部署</h2><p>持续部署（continuous deployment）是持续交付的下一步，指的是代码通过评审以后，自动部署到生产环境。</p><p>持续部署的目标是，代码在任何时刻都是可部署的，可以进入生产阶段。</p><p>持续部署的前提是能自动化完成测试、构建、部署等步骤。它与持续交付的区别，可以参考下图。<br><img src="http://ww1.sinaimg.cn/large/a2490837ly1fu1ch9liinj20go0a0dmd.jpg" alt="持续集成"></p><h2 id="流程"><a href="#流程" class="headerlink" title="流程"></a>流程</h2><p>根据持续集成的设计，代码从提交到生产，整个过程有以下几步。</p><h3 id="提交"><a href="#提交" class="headerlink" title="提交"></a>提交</h3><p>流程的第一步，是开发者向代码仓库提交代码。所有后面的步骤都始于本地代码的一次提交（commit）。</p><h3 id="测试（第一轮）"><a href="#测试（第一轮）" class="headerlink" title="测试（第一轮）"></a>测试（第一轮）</h3><p>代码仓库对 commit 操作配置了钩子（hook），只要提交代码或者合并进主干，就会跑自动化测试。</p><p>测试一般包括以下几种。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">单元测试：针对函数或模块的测试</span><br><span class="line">集成测试：针对整体产品的某个功能的测试，又称功能测试</span><br><span class="line">端对端测试：从用户界面直达数据库的全链路测试</span><br></pre></td></tr></table></figure><p></p><p>第一轮至少要跑单元测试。</p><h3 id="构建"><a href="#构建" class="headerlink" title="构建"></a>构建</h3><p>通过第一轮测试，代码就可以合并进主干，就算可以交付了。</p><p>交付后，就先进行构建（build），再进入第二轮测试。所谓构建，指的是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式表、JS 脚本、图片）等等。</p><p>常用的构建工具如下。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Jenkins</span><br><span class="line">Travis</span><br><span class="line">Codeship</span><br><span class="line">Strider</span><br></pre></td></tr></table></figure><p>Jenkins 和 Strider 是开源软件，Travis 和 Codeship 对于开源项目可以免费使用。它们都会将构建和测试，在一次运行中执行完成。</p><h3 id="测试（第二轮）"><a href="#测试（第二轮）" class="headerlink" title="测试（第二轮）"></a>测试（第二轮）</h3><p>构建完成，就要进行第二轮测试。如果第一轮已经涵盖了所有测试内容，第二轮可以省略，当然，这时构建步骤也要移到第一轮测试前面。</p><p>第二轮是全面测试，单元测试和集成测试都会跑，有条件的话，也要做端对端测试。所有测试以自动化为主，少数无法自动化的测试用例，就要人工跑。</p><p>需要强调的是，新版本的每一个更新点都必须测试到。如果测试的覆盖率不高，进入后面的部署阶段后，很可能会出现严重的问题。</p><h3 id="联调测试"><a href="#联调测试" class="headerlink" title="联调测试"></a>联调测试</h3><p>对于一部分大型项目来说，团队负责的模块可能只是整个项目中的一部分，每次项目可能会涉及到上下游各个团队之间联调。<br>那么就需要在做完本模块的测试后配合上下游团队进行联调，等待联调完成没有问题后，然后上下游协调上线时间，再进行下一步部署</p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>通过了第二轮测试，当前代码就是一个可以直接部署的版本（artifact）。将这个版本的所有文件打包（ tar filename.tar * ）存档，发到生产服务器。</p><p>生产服务器将打包文件，解包成本地的一个目录，再将运行路径的符号链接（symlink）指向这个目录，然后重新启动应用。这方面的部署工具有 Ansible，Chef，Puppet 等。</p><h3 id="回滚"><a href="#回滚" class="headerlink" title="回滚"></a>回滚</h3><p>一旦当前版本发生问题，就要回滚到上一个版本的构建结果。最简单的做法就是修改一下符号链接，指向上一个版本的目录。</p>]]></content>
      
      <categories>
          
          <category> 持续集成 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 持续集成 </tag>
            
            <tag> CI </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo博客文章插入图片</title>
      <link href="/2018/08/07/Hexo%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
      <content type="html"><![CDATA[<p>Hexo 博客文章插入图片<br><a id="more"></a></p><h2 id="Hexo博客插入图片"><a href="#Hexo博客插入图片" class="headerlink" title="Hexo博客插入图片"></a>Hexo博客插入图片</h2><p>在网上查了一下有以下几种方式往hexo文章中插入图片</p><h3 id="本地引用"><a href="#本地引用" class="headerlink" title="本地引用"></a>本地引用</h3><h4 id="绝对路径"><a href="#绝对路径" class="headerlink" title="绝对路径"></a>绝对路径</h4><p>当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。对于source/images/image.jpg这张图片可以用以下语法访问到<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](/images/image.jpg)</span><br></pre></td></tr></table></figure><p></p><p>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p><h4 id="相对路径"><a href="#相对路径" class="headerlink" title="相对路径"></a>相对路径</h4><p>图片除了可以放在统一的images文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置博客根目录下的_config.yml来生成。<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">post_asset_folder: true</span><br></pre></td></tr></table></figure><p></p><p>将_config.yml文件中的配置项post_asset_folder设为true后，执行命令$ hexo new post_name，在source/_posts中会生成文章post_name.md和同名文件夹post_name。将图片资源放在post_name中，文章就可以使用相对路径引用图片资源了。_posts/post_name/image.jpg这张照片可以用以下方式访问：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](image.jpg)</span><br></pre></td></tr></table></figure><p></p><p>上述markdown的引用方式，图片只能在文章中显示，但无法在首页中正常显示。<br>如果希望图片在文章和首页中同时显示，可以使用标签插件语法。_posts/post_name/image.jpg这张照片可以用以下方式访问：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% asset_img image.jpg This is an image %&#125;</span><br></pre></td></tr></table></figure><p></p><h3 id="CDN引用"><a href="#CDN引用" class="headerlink" title="CDN引用"></a>CDN引用</h3><p>除了在本地存储图片，还可以将图片上传到一些免费的CDN服务中。因国内访问github速度较慢，所以将突破放到国内图床上，然后引用外链是常用的方法。<br>常用图床总结：<a href="https://sspai.com/post/40499" target="_blank" rel="noopener">https://sspai.com/post/40499</a></p><blockquote><p>图床，也就是专门提供存储图片的地方，我们只要通过图床提供的 API 接口，把图片上传上去，就可以通过外链访问了，根本不用操心图片是怎么存的，硬盘空间不够了，硬盘坏了，访问速度比较慢等等问题，这些图床都会帮我们搞定，他们会用各种技术帮我们做图片相关的优化和服务，比如多机互备、CDN 加速、图片处理、图片鉴黄、文本识别等等。</p></blockquote><blockquote><p>当然，图床也是有缺点的，当所有人都把图片存在同一个图床上，万一有一天图床真挂了，那所有图片就都无法访问了，虽然这种情况的概率很低，但并不等于不会发生</p></blockquote><blockquote><p>目前图床可以分为两种，一种是公共图床，一种是自建图床。公共图床也就是利用公共服务的图片上传接口，来提供图片外链的服务，比如新浪微博。自建图床，也就是利用各大云服务商提供的存储空间或者自己在 VPS 上使用开源软件来搭建图床，存储图片，生成外链提供访问，比如七牛、Lychee 开源自建图床方案。</p></blockquote><ol><li>微博图床（Chrome浏览器有个“新浪微博图床”插件，可以自动生成markdown链接）简单方便</li><li>七牛：需要注册且实名认证等太麻烦，放弃</li><li>腾讯云等云存储服务，需要先将照片放到云盘，然后找到超链接，然后粘贴到文章。太麻烦，放弃。</li><li><font color="red">【强烈推荐！！！】</font>ipic 工具，具体用法请谷歌，支持监控剪贴板，一键上传到微博图床，免费版默认是微博图床，支持七牛云等，下载地址: <a href="https://itunes.apple.com/cn/app/id1101244278?mt=12" target="_blank" rel="noopener">https://itunes.apple.com/cn/app/id1101244278?mt=12</a></li></ol><h3 id="使用GitHub"><a href="#使用GitHub" class="headerlink" title="使用GitHub"></a>使用GitHub</h3><p>使用github存储博客图片</p><ol><li>创建一个空的repo</li><li>然后将图片push到repo中</li><li>点击图片进去，有个download，右键复制链接</li><li>将链接插入文章<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![logo](https://github.com/xxxx/xx.jpg)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jmeter基础--概念</title>
      <link href="/2018/08/07/Jmeter%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/"/>
      <content type="html"><![CDATA[<p>Jmeter基础概念<br><a id="more"></a></p><h2 id="Jmeter介绍"><a href="#Jmeter介绍" class="headerlink" title="Jmeter介绍"></a>Jmeter介绍</h2><p>一个优秀的开源性能测试工具<br>官网地址：<a href="http://jmeter.apache.org/download_jmeter.cgi" target="_blank" rel="noopener">http://jmeter.apache.org/download_jmeter.cgi</a></p><h2 id="Jmeter包含组件"><a href="#Jmeter包含组件" class="headerlink" title="Jmeter包含组件"></a>Jmeter包含组件</h2><p>Jmeter工具和其他性能工具在原理上完全一致，工具包含4个部分：</p><p>（1）负载发生器：用于产生负载，通常以多线程或是多进程的方式模拟用户行为。</p><p>（2）用户运行器：通常是一个脚本运行引擎，用户运行器附加在线程或进程上，根据脚本要求模拟指定的用户行为。</p><p>（3）资源生成器：用于生成测试过程中服务器、负载机的资源数据。</p><p>（4）报表生成器：根据测试中霍地的数据生成报表，提供可视化的数据显示方式。</p><h3 id="Jmeter设置中文"><a href="#Jmeter设置中文" class="headerlink" title="Jmeter设置中文"></a>Jmeter设置中文</h3><ol><li>jmeter.properties中配置Jmeter界面语言<br>/apache-jmeter-4.0/bin/jmeter.properties中language=en默认屏蔽，取消屏蔽后显示英文界面，language=zh强制显示简体中文界面。</li><li>GUI界面配置：<br><img src="https://github.com/vwin/markdownpic/raw/master/hexo-blog/jmeter-lang.png" alt="Jmeter语言选择"></li></ol><h3 id="测试计划"><a href="#测试计划" class="headerlink" title="测试计划"></a>测试计划</h3><p>Test Plan (测试计划)：用来描述一个性能测试，包含与本次性能测试所有相关的功能。也就说本的性能测试的所有内容是于基于一个计划的。下面看一下一个计划下面都有哪些主要的功能模块（右键单击“测试计划”弹出菜单）。<br><img src="https://ws2.sinaimg.cn/large/0069RVTdly1fu1dlm6u0wj30w00k00ve.jpg" alt="测试计划"><br>虽然有三个添加线程组的选项，名字不一样， 创建之后，其界面是完全一样的。之前的版本只有一个线程组的名字。现在多一个setUp theread Group 与terDown Thread Group</p><ol><li>setup thread group<br>一种特殊类型的ThreadGroup的，可用于执行预测试操作。这些线程的行为完全像一个正常的线程组元件。不同的是，这些类型的线程执行测试前进行定期线程组的执行。</li><li>teardown thread group.<br>一种特殊类型的ThreadGroup的，可用于执行测试后动作。这些线程的行为完全像一个正常的线程组元件。不同的是，这些类型的线程执行测试结束后执行定期的线程组。</li><li>thread group(线程组).<br>这个就是我们通常添加运行的线程。通俗的讲一个线程组,，可以看做一个虚拟用户组，线程组中的每个线程都可以理解为一个虚拟用户。线程组中包含的线程数量在测试执行过程中是不会发生改变的。</li></ol><h3 id="测试片段"><a href="#测试片段" class="headerlink" title="测试片段"></a>测试片段</h3><p>测试片段元素是控制器上的一个种特殊的线程组，它在测试树上与线程组处于一个层级。它与线程组有所不同，因为它不被执行，除非它是一个模块控制器或者是被控制器所引用时才会被执行。<br><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fu1dp4x6jjj30hb0a0755.jpg" alt="测试片段"></p><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><p>JMeter有两种类型的控制器：取样器（sample）和逻辑控制器（Logic Controller），用这些原件来驱动处理一个测试。</p><h4 id="采样器"><a href="#采样器" class="headerlink" title="采样器"></a>采样器</h4><p>取样器（Sample）是性能测试中向服务器发送请求，记录响应信息，记录响应时间的最小单元，JMeter 原生支持多种不同的sampler ，如 HTTP Request Sampler 、 FTP Request Sample 、TCP Request Sample 、JDBC Request Sampler 等，每一种不同类型的 sampler 可以根据设置的参数向服务器发出不同类型的请求。<br><img src="https://ws2.sinaimg.cn/large/0069RVTdly1fu1ds3unxyj30lh0fnacb.jpg" alt="采样器"></p><h4 id="逻辑控制器（Logic-Controller）"><a href="#逻辑控制器（Logic-Controller）" class="headerlink" title="逻辑控制器（Logic Controller）"></a>逻辑控制器（Logic Controller）</h4><p>逻辑控制器，包括两类无件，一类是用于控制test plan 中 sampler 节点发送请求的逻辑顺序的控制器，常用的有 如果（If）控制器 、switch Controller 、Runtime Controller、循环控制器等。另一类是用来组织可控制 sampler 来节点的，如 事务控制器、吞吐量控制器。<br><img src="https://ws2.sinaimg.cn/large/0069RVTdly1fu1dukjfaqj30w00k0dir.jpg" alt="逻辑控制器"></p><h3 id="配置元件"><a href="#配置元件" class="headerlink" title="配置元件"></a>配置元件</h3><p>配置元件（config element）用于提供对静态数据配置的支持。CSV Data Set config 可以将本地数据文件形成数据池（Data Pool），而对应于HTTP Request Sampler和 TCP Request Sampler等类型的配制无件则可以修改Sampler的默认数据。（例如，HTTP Cookie Manager 可以用于对 HTTP Request Sampler 的cookie 进行管理）<br><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fu1dvqv6w8j30w00k041t.jpg" alt="配置元件"></p><h3 id="定时器"><a href="#定时器" class="headerlink" title="定时器"></a>定时器</h3><p>定时器（Timer）用于操作之间设置等待时间，等待时间是性能测试中常用的控制客户端QPS的手端。类似于LoadRunner里面的“思考时间”。JMeter 定义了Bean Shell Timer、Constant Throughput Timer、固定定时器等不同类型的Timer。<br><img src="https://ws2.sinaimg.cn/large/0069RVTdly1fu1dwdrmb8j30w00k0n03.jpg" alt="定时器"></p><h3 id="前置处理器（Per-Processors）"><a href="#前置处理器（Per-Processors）" class="headerlink" title="前置处理器（Per Processors）"></a>前置处理器（Per Processors）</h3><p>用于在实际的请求发出之前对即将发出的请求进行特殊处理。例如，HTTP URL重写修复符则可以实现URL重写，当RUL中有sessionID 一类的session信息时，可以通过该处理器填充发出请求的实际的sessionID 。<br><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fu1dxfqrxxj30w00k0ju8.jpg" alt="前置处理器"></p><h3 id="后置处理器（Post-Processors）"><a href="#后置处理器（Post-Processors）" class="headerlink" title="后置处理器（Post Processors）"></a>后置处理器（Post Processors）</h3><p>用于对Sampler 发出请求后得到的服务器响应进行处理。一般用来提取响应中的特定数据（类似LoadRunner测试工具中的关联概念）。例如，XPath Extractor 则可以用于提取响应数据中通过给定XPath 值获得的数据。<br><img src="https://ws3.sinaimg.cn/large/0069RVTdly1fu1dy72ixkj30w00k0q5x.jpg" alt="后置处理器"></p><h3 id="断言（Assertions）"><a href="#断言（Assertions）" class="headerlink" title="断言（Assertions）"></a>断言（Assertions）</h3><p>断言用于检查测试中得到的相应数据等是否符合预期，断言一般用来设置检查点，用以保证性能测试过程中的数据交互是否与预期一致。<br><img src="https://ws1.sinaimg.cn/large/0069RVTdly1fu1dywlw7ej30w00k0q5w.jpg" alt="断言"></p><h3 id="监听器（Listener）"><a href="#监听器（Listener）" class="headerlink" title="监听器（Listener）"></a>监听器（Listener）</h3><p>这个监听器可不是用来监听系统资源的元件。它是用来对测试结果数据进行处理和可视化展示的一系列元件。 图行结果、查看结果树、聚合报告。都是我们经常用到的元件。</p><p><img src="https://ws4.sinaimg.cn/large/0069RVTdly1fu1dzp8i85j30w00k0jul.jpg" alt="监听器"></p>]]></content>
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jmeter </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo Next主题开启字数统计和阅读时长统计</title>
      <link href="/2018/08/02/Hexo-Next%E4%B8%BB%E9%A2%98%E5%BC%80%E5%90%AF%E5%AD%97%E6%95%B0%E7%BB%9F%E8%AE%A1%E5%92%8C%E9%98%85%E8%AF%BB%E6%97%B6%E9%95%BF%E7%BB%9F%E8%AE%A1/"/>
      <content type="html"><![CDATA[<p>Hexo Next主题开启字数统计和阅读时长统计<br><a id="more"></a></p><blockquote><p>注：Next主题版本 v6.3.0</p></blockquote><h2 id="安装-hexo-symbols-count-time"><a href="#安装-hexo-symbols-count-time" class="headerlink" title="安装 hexo-symbols-count-time"></a>安装 hexo-symbols-count-time</h2><p>在博客目录下执行：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-symbols-count-time</span><br><span class="line">or</span><br><span class="line">yarn add hexo-symbols-count-time</span><br></pre></td></tr></table></figure><p></p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ol><li>hexo配置<br>在博客根目录下的_config.yaml,增加如下配置：<blockquote><p>注：增加该配置需要重启hexo<br>hexo clean &amp;&amp; hexo s</p></blockquote></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  symbols: true # 文章字数</span><br><span class="line">  time: true # 阅读时长</span><br><span class="line">  total_symbols: true # 所有文章总字数</span><br><span class="line">  total_time: true # 所有文章阅读中时长</span><br></pre></td></tr></table></figure><ol><li>next主题配置<br>在themes/next/_config.yaml，修改如下配置：<blockquote><p>注：无需重启</p></blockquote></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">symbols_count_time:</span><br><span class="line">  separated_meta: true  # 是否换行显示 字数统计 及 阅读时长</span><br><span class="line">  item_text_post: true  # 文章 字数统计 阅读时长 使用图标 还是 文本表示</span><br><span class="line">  item_text_total: false # 博客底部统计 字数统计 阅读时长 使用图标 还是 文本表示</span><br><span class="line">  awl: 4</span><br><span class="line">  wpm: 275</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo Next主题头像旋转</title>
      <link href="/2018/08/02/Hexo-Next%E4%B8%BB%E9%A2%98%E5%A4%B4%E5%83%8F%E6%97%8B%E8%BD%AC/"/>
      <content type="html"><![CDATA[<p>Hexo Next主题将头像显示成圆形，鼠标放上去有旋转效果。<br><a id="more"></a><br>将头像显示成圆形，鼠标放上去有旋转效果。<br>找到/themes/next/source/css/_common/components/sidebar/sidebar-author.styl<br>替换其中的site-author-img和site-author-image:hover属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 头像显示圆形</span></span><br><span class="line">.site-author-image &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  margin: <span class="number">0</span> auto;</span><br><span class="line">  padding: $site-author-image-padding;</span><br><span class="line">  max-width: $site-author-image-width;</span><br><span class="line">  height: $site-author-image-height;</span><br><span class="line">  border: site-author-image-border-color;</span><br><span class="line">  /* start*/</span><br><span class="line">  border-radius: <span class="number">50</span>%</span><br><span class="line">  webkit-transition: <span class="number">1.4</span>s all;</span><br><span class="line">  moz-transition: <span class="number">1.4</span>s all;</span><br><span class="line">  ms-transition: <span class="number">1.4</span>s all;</span><br><span class="line">  transition: <span class="number">1.4</span>s all;</span><br><span class="line">  /* end */</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 头像旋转事件</span></span><br><span class="line">/* start */</span><br><span class="line">.site-author-image:hover &#123;</span><br><span class="line">  background-color: <span class="comment">#55DAE1;</span></span><br><span class="line">  webkit-transform: rotate(<span class="number">360</span>deg) scale(<span class="number">1.1</span>);</span><br><span class="line">  moz-transform: rotate(<span class="number">360</span>deg) scale(<span class="number">1.1</span>);</span><br><span class="line">  ms-transform: rotate(<span class="number">360</span>deg) scale(<span class="number">1.1</span>);</span><br><span class="line">  transform: rotate(<span class="number">360</span>deg) scale(<span class="number">1.1</span>);</span><br><span class="line">&#125;</span><br><span class="line">/* end */</span><br></pre></td></tr></table></figure>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Jmeter安装</title>
      <link href="/2018/08/01/Jmeter%E5%AE%89%E8%A3%85/"/>
      <content type="html"><![CDATA[<h2 id="Ubuntu安装JDK"><a href="#Ubuntu安装JDK" class="headerlink" title="Ubuntu安装JDK"></a>Ubuntu安装JDK</h2><ol><li><p>更新软件包列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure></li><li><p>安装openjdk-8-jdk</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openjdk-8-jdk</span><br></pre></td></tr></table></figure></li><li><p>查看Java版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -version</span><br></pre></td></tr></table></figure></li></ol><h2 id="Mac安装Java"><a href="#Mac安装Java" class="headerlink" title="Mac安装Java"></a>Mac安装Java</h2><h3 id="JRE和JDK的区别"><a href="#JRE和JDK的区别" class="headerlink" title="JRE和JDK的区别"></a>JRE和JDK的区别</h3><ul><li>JRE： Java Runtime Environment</li><li>JDK：Java Development Kit</li><li>JRE顾名思义是java运行时环境，包含了java虚拟机，java基础类库。是使用java语言编写的程序运行所需要的软件环境，是提供给想运行java程序的用户使用的。</li><li>JDK顾名思义是java开发工具包，是程序员使用java语言编写java程序所需的开发工具包，是提供给程序员使用的。JDK包含了JRE，同时还包含了编译java源码的编译器javac，还包含了很多java程序调试和分析的工具：jconsole，jvisualvm等工具软件，还包含了java程序编写所需的文档和demo例子程序。所以JDK的包比JRE大很多。</li><li>如果你需要运行java程序，只需安装JRE就可以了</li><li>如果你需要编写java程序，需要安装JDK。</li><li>JRE根据不同操作系统（如：windows，linux等）和不同JRE提供商（IBM,ORACLE等）有很多版本，最常用的是Oracle公司收购SUN公司的JRE版本。</li></ul><h3 id="安装JRE-JDK"><a href="#安装JRE-JDK" class="headerlink" title="安装JRE/JDK"></a>安装JRE/JDK</h3><ul><li>JRE下载地址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jre8-downloads-2133155.html</a></li><li>JDK下载地址：<br><a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html</a><br>Mac下载对应的包，下载完成后直接安装即可</li></ul><h3 id="环境变量配置"><a href="#环境变量配置" class="headerlink" title="环境变量配置"></a>环境变量配置</h3><ol><li>JRE:如果安装的是JRE，那么在Mac上默认的路径是<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin/Contents/Home</span><br></pre></td></tr></table></figure></li></ol><ul><li>配置环境变量（vi ~/.bash_profile）：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin/Contents/Home</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH</span><br><span class="line">export JAVA_HOME</span><br><span class="line">export PATH</span><br></pre></td></tr></table></figure></li></ul><ol><li>JDK:如果安装的是JDK，那么在Mac上默认的路径是<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/Library/Java/JavaVirtualMachines/</span><br></pre></td></tr></table></figure></li></ol><ul><li>配置环境变量（vi ~/.bash_profile）：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_40.jdk/Contents/Home</span><br><span class="line">PATH=$JAVA_HOME/bin:$PATH:.</span><br><span class="line">CLASSPATH=$JAVA_HOME/lib/tools.jar:$JAVA_HOME/lib/dt.jar:.</span><br><span class="line">export JAVA_HOME</span><br><span class="line">export PATH</span><br><span class="line">export CLASSPATH</span><br></pre></td></tr></table></figure></li></ul><h2 id="安装Jmeter"><a href="#安装Jmeter" class="headerlink" title="安装Jmeter"></a>安装Jmeter</h2><ol><li><p>下载Jmeter4.0</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget -c http://www-us.apache.org/dist//jmeter/binaries/apache-jmeter-4.0.tgz</span><br></pre></td></tr></table></figure></li><li><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xf apache-jmeter-4.0.tgz</span><br></pre></td></tr></table></figure></li><li><p>运行sample</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apache-jmeter-4.0/bin/./jmeter -n -t apache-jmeter-4.0/extras/Test.jmx</span><br></pre></td></tr></table></figure></li></ol><h2 id="Jmeter基础"><a href="#Jmeter基础" class="headerlink" title="Jmeter基础"></a>Jmeter基础</h2><h3 id="Jmeter环境变量配置"><a href="#Jmeter环境变量配置" class="headerlink" title="Jmeter环境变量配置"></a>Jmeter环境变量配置</h3><ul><li><p>MAC版本,具体路径请根据自己本地路径进行替换</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export JMETER_HOME=/Users/xxx/apache-jmeter-4.0</span><br><span class="line">export CLASSPATH=.:$JMETER_HOME/lib/ext/ApacheJMeter_core.jar:$JMETER_HOME/lib/jorphan.jar</span><br><span class="line">export PATH=$JMETER_HOME/bin:$PATH</span><br></pre></td></tr></table></figure></li><li><p>Mac下启动jmeter</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">完成环境变量配置后，直接在终端输入jmeter即可启动。</span><br></pre></td></tr></table></figure></li></ul><h3 id="Jmeter基础-1"><a href="#Jmeter基础-1" class="headerlink" title="Jmeter基础"></a>Jmeter基础</h3><p>请看Jmeter基础系列文章。</p>]]></content>
      
      <categories>
          
          <category> 性能测试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
            <tag> jmeter </tag>
            
            <tag> jdk </tag>
            
            <tag> jre </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>tmux 配置&amp;快捷键</title>
      <link href="/2018/07/17/tmux-%E9%85%8D%E7%BD%AE&amp;%E5%BF%AB%E6%8D%B7%E9%94%AE/"/>
      <content type="html"><![CDATA[<p>tmux基本配置&amp;快捷键</p><h2 id="Tmux基本配置"><a href="#Tmux基本配置" class="headerlink" title="Tmux基本配置"></a>Tmux基本配置</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">set -g prefix C-a <span class="comment">#</span></span><br><span class="line">unbind C-b <span class="comment"># C-b即Ctrl+b键，unbind意味着解除绑定</span></span><br><span class="line">bind C-a send-prefix <span class="comment"># 绑定Ctrl+a为新的指令前缀</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 从tmux v1.6版起，支持设置第二个指令前缀</span></span><br><span class="line">set-option -g prefix2 ` <span class="comment"># 设置一个不常用的`键作为指令前缀，按键更快些</span></span><br><span class="line">set-option -g mouse on <span class="comment"># 等同于以上4个指令的效果</span></span><br><span class="line">unbind <span class="string">'"'</span></span><br><span class="line">bind - splitw -v -c <span class="string">'#&#123;pane_current_path&#125;'</span> <span class="comment"># 垂直方向新增面板，默认进入当前目录</span></span><br><span class="line">unbind %</span><br><span class="line">bind | splitw -h -c <span class="string">'#&#123;pane_current_path&#125;'</span> <span class="comment"># 水平方向新增面板，默认进入当前目录</span></span><br><span class="line"><span class="comment"># 绑定快捷键为r,读取配置文件</span></span><br><span class="line">bind r source-file ~/.tmux.conf \; display-message <span class="string">"Config reloaded.."</span></span><br></pre></td></tr></table></figure><h2 id="Tmux快捷键"><a href="#Tmux快捷键" class="headerlink" title="Tmux快捷键"></a>Tmux快捷键</h2><p>启动新会话：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux [new -s 会话名 -n 窗口名]</span><br></pre></td></tr></table></figure><p></p><p>恢复会话：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux at [-t 会话名]</span><br></pre></td></tr></table></figure><p></p><p>列出所有会话：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux ls</span><br></pre></td></tr></table></figure><p></p><p>关闭会话：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux kill-session -t 会话名</span><br></pre></td></tr></table></figure><p></p><p>关闭所有会话：<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tmux ls | grep : | cut -d. -f1 | awk '&#123;print substr($1, 0, length($1)-1)&#125;' | xargs kill</span><br></pre></td></tr></table></figure><p></p>]]></content>
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> tmux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>豆瓣电影评论生成词云</title>
      <link href="/2018/07/13/%E8%B1%86%E7%93%A3%E7%94%B5%E5%BD%B1%E8%AF%84%E8%AE%BA%E7%94%9F%E6%88%90%E8%AF%8D%E4%BA%91/"/>
      <content type="html"><![CDATA[<h2 id="抓取豆瓣电影评论并生成词云"><a href="#抓取豆瓣电影评论并生成词云" class="headerlink" title="抓取豆瓣电影评论并生成词云"></a>抓取豆瓣电影评论并生成词云</h2><a id="more"></a><h2 id="目标：抓取豆瓣电影评论生成词云"><a href="#目标：抓取豆瓣电影评论生成词云" class="headerlink" title="目标：抓取豆瓣电影评论生成词云"></a>目标：抓取豆瓣电影评论生成词云</h2><h3 id="第一步：抓取评论"><a href="#第一步：抓取评论" class="headerlink" title="第一步：抓取评论"></a>第一步：抓取评论</h3><p>代码如下。具体见注释<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCommentsById</span><span class="params">(movieId, pageNum)</span>:</span></span><br><span class="line">    eachCommentList = []</span><br><span class="line">    <span class="comment"># 抓取评论的页数</span></span><br><span class="line">    <span class="keyword">if</span> pageNum &gt; <span class="number">0</span>:</span><br><span class="line">    </span><br><span class="line">        start = (pageNum - <span class="number">1</span>) * <span class="number">20</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="comment"># 豆瓣电影评论的地址</span></span><br><span class="line">    requrl = (</span><br><span class="line">        <span class="string">"https://movie.douban.com/subject/"</span></span><br><span class="line">        + movieId</span><br><span class="line">        + <span class="string">"/comments"</span></span><br><span class="line">        + <span class="string">"?"</span></span><br><span class="line">        + <span class="string">"start="</span></span><br><span class="line">        + str(start)</span><br><span class="line">        + <span class="string">"&amp;limit=20"</span></span><br><span class="line">    )</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="comment"># 抓取</span></span><br><span class="line">        resp = requests.get(requrl)</span><br><span class="line">        <span class="comment"># 用utf-8格式化返回结果</span></span><br><span class="line">        html_data = resp.content.decode(<span class="string">"utf-8"</span>)</span><br><span class="line">        <span class="comment"># 用beautifulsoup处理返回结果，指定parser为html</span></span><br><span class="line">        soup = bs(html_data, <span class="string">"html.parser"</span>)</span><br><span class="line">        <span class="comment"># 获取评论</span></span><br><span class="line">        comment_div_lits = soup.find_all(<span class="string">"div"</span>, class_=<span class="string">"comment"</span>)</span><br><span class="line">        <span class="comment"># 将评论写入数组</span></span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> comment_div_lits:</span><br><span class="line">            <span class="keyword">if</span> item.find_all(<span class="string">"p"</span>)[<span class="number">0</span>].string <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">                eachCommentList.append(item.find_all(<span class="string">"p"</span>)[<span class="number">0</span>].string)</span><br><span class="line">    <span class="comment"># 捕获异常</span></span><br><span class="line">    <span class="keyword">except</span> RequestException <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">"请求问题，原因：%s"</span> % e)</span><br><span class="line">    <span class="comment"># 返回评论数组</span></span><br><span class="line">    <span class="keyword">return</span> eachCommentList</span><br></pre></td></tr></table></figure><p></p><h3 id="第二步：将抓取的评论转换为字符串"><a href="#第二步：将抓取的评论转换为字符串" class="headerlink" title="第二步：将抓取的评论转换为字符串"></a>第二步：将抓取的评论转换为字符串</h3><p>代码如下。具体见注释<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">commentList = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    num = i + <span class="number">1</span></span><br><span class="line">    <span class="comment"># 使用上面的方法获取评论列表</span></span><br><span class="line">    commentList_temp = getCommentsById(movieId=movieId, pageNum=num)</span><br><span class="line">    commentList.append(commentList_temp)</span><br><span class="line">    <span class="comment"># 将列表中的数据转换为字符串</span></span><br><span class="line">comments = <span class="string">""</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> range(len(commentList)):</span><br><span class="line">    <span class="comment"># print(commentList[k])</span></span><br><span class="line">    <span class="comment"># 去掉空格等</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> range(len(commentList[k])):</span><br><span class="line">        comments = comments + str(commentList[k][m]).strip()</span><br></pre></td></tr></table></figure><p></p><h3 id="第三步：使用正则去掉标点"><a href="#第三步：使用正则去掉标点" class="headerlink" title="第三步：使用正则去掉标点"></a>第三步：使用正则去掉标点</h3><p>代码如下。具体见注释<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用正则去掉标点</span></span><br><span class="line">filtrate = re.compile(<span class="string">r"[^\u4E00-\u9FA5]"</span>)  <span class="comment"># 提取中文，过滤掉非中文字符</span></span><br><span class="line">filtered_str = filtrate.sub(<span class="string">r""</span>, comments)  <span class="comment"># replace</span></span><br></pre></td></tr></table></figure><p></p><h3 id="第四步：使用结巴分词进行中文分词"><a href="#第四步：使用结巴分词进行中文分词" class="headerlink" title="第四步：使用结巴分词进行中文分词"></a>第四步：使用结巴分词进行中文分词</h3><p>代码如下。具体见注释<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用结巴分词进行中文分词</span></span><br><span class="line">segment = jieba.lcut(filtered_str)</span><br><span class="line">words_df = pd.DataFrame(&#123;<span class="string">"segment"</span>: segment&#125;)</span><br></pre></td></tr></table></figure><p></p><h3 id="第五步：去掉停用词"><a href="#第五步：去掉停用词" class="headerlink" title="第五步：去掉停用词"></a>第五步：去掉停用词</h3><p>代码如下。具体见注释<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 去掉停用词。</span></span><br><span class="line"><span class="comment"># 停用词是指在信息检索中，为节省存储空间和提高搜索效率</span></span><br><span class="line"><span class="comment"># 在处理自然语言数据（或文本）之前或之后会自动过滤掉某些字或词</span></span><br><span class="line"><span class="comment"># 这些字或词即被称为Stop Words（停用词）。</span></span><br><span class="line">stopwords = pd.read_csv(</span><br><span class="line">    <span class="string">"./stopwords.txt"</span>,</span><br><span class="line">    index_col=<span class="keyword">False</span>,</span><br><span class="line">    quoting=<span class="number">3</span>,</span><br><span class="line">    sep=<span class="string">"t"</span>,</span><br><span class="line">    names=[<span class="string">"stopword"</span>],</span><br><span class="line">    encoding=<span class="string">"utf-8"</span>,</span><br><span class="line">)</span><br><span class="line">words_df = words_df[~words_df.segment.isin(stopwords.stopword)]</span><br></pre></td></tr></table></figure><p></p><h3 id="第六步：统计词频"><a href="#第六步：统计词频" class="headerlink" title="第六步：统计词频"></a>第六步：统计词频</h3><p>代码如下。具体见注释<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 统计词频</span></span><br><span class="line">words_stat = words_df.groupby(by=[<span class="string">"segment"</span>])[<span class="string">"segment"</span>].agg(&#123;<span class="string">"计数"</span>: numpy.size&#125;)</span><br><span class="line">words_stat = words_stat.reset_index().sort_values(by=[<span class="string">"计数"</span>], ascending=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p></p><h3 id="第七步：用词云进行显示"><a href="#第七步：用词云进行显示" class="headerlink" title="第七步：用词云进行显示"></a>第七步：用词云进行显示</h3><p>代码如下。具体见注释<br></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用词云进行显示</span></span><br><span class="line">wordcloud = WordCloud(</span><br><span class="line">    font_path=<span class="string">"./simkai.ttf"</span>,</span><br><span class="line">    background_color=<span class="string">"white"</span>,</span><br><span class="line">    max_font_size=<span class="number">80</span>,</span><br><span class="line">    width=<span class="number">1000</span>,</span><br><span class="line">    height=<span class="number">860</span>,</span><br><span class="line">    margin=<span class="number">2</span>,</span><br><span class="line">)</span><br><span class="line">word_frequence = &#123;x[<span class="number">0</span>]: x[<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> words_stat.head(<span class="number">1000</span>).values&#125;</span><br><span class="line"></span><br><span class="line">wordcloud = wordcloud.fit_words(word_frequence)</span><br><span class="line">plt.imshow(wordcloud)</span><br><span class="line">plt.axis(<span class="string">"off"</span>)</span><br><span class="line">plt.show(block=<span class="keyword">False</span>)</span><br><span class="line">img_name = <span class="string">"./"</span> + movieName + <span class="string">".jpg"</span></span><br><span class="line">wordcloud.to_file(img_name)</span><br></pre></td></tr></table></figure><p></p><h3 id="End"><a href="#End" class="headerlink" title="End"></a>End</h3><p><a href="https://github.com/vwin/douban-movie-wordcloud" target="_blank" rel="noopener">源码github地址</a></p>]]></content>
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 豆瓣 </tag>
            
            <tag> 电影 </tag>
            
            <tag> 词云 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/02/26/hello-world/"/>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.<br><a id="more"></a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br><span class="line">or</span><br><span class="line">$ hexo new post <span class="string">"test"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">or</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">or</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">or</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
